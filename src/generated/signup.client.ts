// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "signup.proto" (package "com.example", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./signup";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UserReply } from "./signup";
import type { UserRequest } from "./signup";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service com.example.UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: register(com.example.UserRequest) returns (com.example.UserReply);
     */
    register(input: UserRequest, options?: RpcOptions): UnaryCall<UserRequest, UserReply>;
}
/**
 * @generated from protobuf service com.example.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: register(com.example.UserRequest) returns (com.example.UserReply);
     */
    register(input: UserRequest, options?: RpcOptions): UnaryCall<UserRequest, UserReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserRequest, UserReply>("unary", this._transport, method, opt, input);
    }
}
