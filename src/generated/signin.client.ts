// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "signin.proto" (package "com.example", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { LoginService } from './signin';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { LoginResponse } from './signin';
import type { LoginRequest } from './signin';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * @generated from protobuf service com.example.LoginService
 */
export interface ILoginServiceClient {
	/**
	 * @generated from protobuf rpc: login(com.example.LoginRequest) returns (com.example.LoginResponse);
	 */
	login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
}
/**
 * @generated from protobuf service com.example.LoginService
 */
export class LoginServiceClient implements ILoginServiceClient, ServiceInfo {
	typeName = LoginService.typeName;
	methods = LoginService.methods;
	options = LoginService.options;
	constructor(private readonly _transport: RpcTransport) {}
	/**
	 * @generated from protobuf rpc: login(com.example.LoginRequest) returns (com.example.LoginResponse);
	 */
	login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
		const method = this.methods[0],
			opt = this._transport.mergeOptions(options);
		return stackIntercept<LoginRequest, LoginResponse>(
			'unary',
			this._transport,
			method,
			opt,
			input
		);
	}
}
